{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/AToMixz/Desktop/Arbitrage/The-arbitrage-NSC/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/AToMixz/Desktop/Arbitrage/The-arbitrage-NSC/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\AToMixz\\\\Desktop\\\\Arbitrage\\\\The-arbitrage-NSC\\\\pages\\\\testsend.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Layout from '../components/layouts/layout';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nvar useStylesbuttom = makeStyles(function (theme) {\n  return createStyles({\n    button: {\n      margin: theme.spacing(1)\n    }\n  });\n});\nvar useStyles = makeStyles({\n  root: {\n    maxWidth: 800\n  },\n  media: {\n    height: 800\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"left\",\n    alignItems: \"left\",\n    minHeight: \"50vh\"\n  },\n  test: {\n    display: \"flex\",\n    marginLeft: \"500px\"\n  },\n  testright: {\n    display: \"flex\",\n    marginLeft: \"1000px\",\n    marginTop: \"-350px\"\n  }\n});\nvar useStylesRight = makeStyles({\n  root: {\n    maxWidth: 350,\n    marginTop: \"-380px\",\n    marginLeft: \"950px\"\n  },\n  media: {\n    height: 500\n  }\n});\nvar WETH = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\nvar DAI = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\nvar OMG = \"0xd26114cd6ee289accf82350c8d8487fedb8a0c07\";\nvar MKR = \"0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2\";\nvar USDT = \"0x8dd5fbce2f6a956c3022ba3663759011dd51e73e\";\nvar LCN = \"0x0b3df94f9a997981c5ad52b0a16a26f6bb6039ed\";\nvar USDC = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nexport var __N_SSP = true;\nexport default function Test(props, initialId) {\n  _s();\n\n  var _useState = useState(initialId),\n      newId = _useState[0],\n      setNewId = _useState[1];\n\n  var _useState2 = useState(0),\n      Price = _useState2[0],\n      setPrice = _useState2[1];\n\n  var _useState3 = useState(0),\n      Hash = _useState3[0],\n      setHash = _useState3[1]; //const [node, setNode1] = useState(0)\n  //  console.log(\"Price\", Price)\n\n\n  var onSave = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(valueinput) {\n      var response, response2;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"valueinput\", valueinput);\n              _context.next = 3;\n              return axios.post('http://localhost:5001/checkcoin', {\n                //ETH\n                valueinput: valueinput,\n                //0.005 ค่าที่กรอกในช่องอ่านั้นแหละ\n                fromtoken: WETH,\n                //WETH -USDC\n                totoken: USDC\n              });\n\n            case 3:\n              response = _context.sent;\n              //setPrice(response.data) //10\n              console.log(\"  response.data\", response.data);\n              console.log(\"  bestRoute.bestRoute\", response.data.bestRoute); //ETH -> MKR -> USDC -> ETH'\n\n              _context.next = 8;\n              return axios.post('http://localhost:5001/swapcoin', {\n                valueinput: valueinput,\n                // Hash: Hash,\n                test: response.data.bestRoute // fromtoken: MKR, //WETH -MKR\n                // totoken: DAI,\n\n              });\n\n            case 8:\n              response2 = _context.sent;\n              console.log(\"FROM NODE\", response2.data);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSave(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); //console.log(\"Hash\", Hash) //1000.000\n\n\n  var data = props.result.data;\n\n  var formatPercent = function formatPercent(number) {\n    return \"\".concat(new Number(number).toFixed(2), \"%\");\n  };\n\n  var formatDollar = function formatDollar(number, maximumSignificantDigits) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      maximumSignificantDigits: maximumSignificantDigits\n    }).format(number);\n  };\n\n  var classestest = useStylesbuttom();\n  var classes = useStyles();\n  var classesRight = useStylesRight();\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.test,\n          children: [\"Balance:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Token: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              value: \"WETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Enter coin\",\n          onChange: function onChange(e) {\n            return setNewId(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Token:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              value: \"MKR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Enter coin\",\n          value: Price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Enter coin\",\n          value: \"https://kovan.etherscan.io/tx/\" + Hash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classestest.button,\n          onClick: function onClick() {\n            return onSave(newId);\n          },\n          children: \"Exchang Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"K5mzLnad+jwf7kfDPZVC7m0axEU=\", false, function () {\n  return [useStylesbuttom, useStyles, useStylesRight];\n});\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/AToMixz/Desktop/Arbitrage/The-arbitrage-NSC/pages/testsend.tsx"],"names":["React","useState","createStyles","makeStyles","Layout","Card","Button","axios","useStylesbuttom","theme","button","margin","spacing","useStyles","root","maxWidth","media","height","container","display","flexDirection","justifyContent","alignItems","minHeight","test","marginLeft","testright","marginTop","useStylesRight","WETH","DAI","OMG","MKR","USDT","LCN","USDC","Test","props","initialId","newId","setNewId","Price","setPrice","Hash","setHash","onSave","valueinput","console","log","post","fromtoken","totoken","response","data","bestRoute","response2","result","formatPercent","number","Number","toFixed","formatDollar","maximumSignificantDigits","Intl","NumberFormat","style","currency","format","classestest","classes","classesRight","e","target","value"],"mappings":"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","sourcesContent":["import React, { ReactElement, useState } from 'react'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Header from '../components/layouts/header'\r\nimport Layout from '../components/layouts/layout'\r\nimport Menu from '../components/layouts/menu'\r\nimport CoinGecko from 'coingecko-api';\r\nconst coinGeckoClient = new CoinGecko();\r\nimport MaterialTable from 'material-table'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { Theme } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { Hash } from 'crypto';\r\nconst useStylesbuttom = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 800,\r\n    },\r\n    media: {\r\n        height: 800,\r\n    },\r\n    container: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"left\",\r\n        alignItems: \"left\",\r\n        minHeight: \"50vh\",\r\n    },\r\n    test: {\r\n        display: \"flex\",\r\n        marginLeft: \"500px\",\r\n    },\r\n    testright: {\r\n        display: \"flex\",\r\n        marginLeft: \"1000px\",\r\n        marginTop: \"-350px\"\r\n\r\n    }\r\n});\r\n\r\nconst useStylesRight = makeStyles({\r\n    root: {\r\n        maxWidth: 350,\r\n        marginTop: \"-380px\",\r\n        marginLeft: \"950px\",\r\n    },\r\n    media: {\r\n        height: 500,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    result: { data: any; };\r\n    initialId: any,\r\n    valueinput: any,\r\n\r\n}\r\nexport async function getServerSideProps(context) {\r\n    const params = {\r\n        order: CoinGecko.ORDER.MARKET_CAP_DESC\r\n    };\r\n    const result = await coinGeckoClient.coins.markets({ params });\r\n    return {\r\n        props: {\r\n            result\r\n        },\r\n    }\r\n}\r\nconst WETH = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\r\nconst DAI = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\r\nconst OMG = \"0xd26114cd6ee289accf82350c8d8487fedb8a0c07\";\r\nconst MKR = \"0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2\";\r\nconst USDT = \"0x8dd5fbce2f6a956c3022ba3663759011dd51e73e\";\r\nconst LCN = \"0x0b3df94f9a997981c5ad52b0a16a26f6bb6039ed\";\r\nconst USDC = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\r\nexport default function Test(props, initialId: Props): ReactElement {\r\n    const [newId, setNewId] = useState(initialId)\r\n    const [Price, setPrice] = useState(0)\r\n    const [Hash, setHash] = useState(0)\r\n    //const [node, setNode1] = useState(0)\r\n    //  console.log(\"Price\", Price)\r\n    const onSave = async (valueinput: any) => {\r\n        console.log(\"valueinput\", valueinput);\r\n        const response = await axios.post('http://localhost:5001/checkcoin', { //ETH\r\n            valueinput, //0.005 ค่าที่กรอกในช่องอ่านั้นแหละ\r\n            fromtoken: WETH, //WETH -USDC\r\n            totoken: USDC,\r\n        })\r\n        //setPrice(response.data) //10\r\n\r\n        console.log(\"  response.data\", response.data)\r\n        console.log(\"  bestRoute.bestRoute\", response.data.bestRoute) //ETH -> MKR -> USDC -> ETH'\r\n        const response2 = await axios.post('http://localhost:5001/swapcoin', {\r\n            valueinput: valueinput,\r\n           // Hash: Hash,\r\n            test: response.data.bestRoute,\r\n            // fromtoken: MKR, //WETH -MKR\r\n            // totoken: DAI,\r\n\r\n        })\r\n\r\n        console.log(\"FROM NODE\", response2.data);\r\n    }\r\n\r\n    //console.log(\"Hash\", Hash) //1000.000\r\n    const { data } = props.result;\r\n    const formatPercent = number =>\r\n        `${new Number(number).toFixed(2)}%`\r\n\r\n    const formatDollar = (number, maximumSignificantDigits) =>\r\n        new Intl.NumberFormat(\r\n            'en-US',\r\n            {\r\n                style: 'currency',\r\n                currency: 'USD',\r\n                maximumSignificantDigits\r\n            })\r\n            .format(number);\r\n    const classestest = useStylesbuttom();\r\n    const classes = useStyles();\r\n    const classesRight = useStylesRight();\r\n    return (\r\n        <Layout>\r\n            <div className={classes.container}>\r\n                <Card className={classes.root}>\r\n                    <div className={classes.test}>\r\n                        Balance:\r\n                     <input type=\"text\" name=\"name\" />\r\n                    </div>\r\n\r\n                    <form>\r\n                        <label>\r\n                            Token: <input type=\"text\" name=\"name\" value=\"WETH\" />\r\n                        </label>\r\n                    </form>\r\n                    <input type=\"text\" name=\"name\" placeholder=\"Enter coin\" onChange={(e) => setNewId(e.target.value)} />\r\n\r\n                    <form>\r\n                        <label>\r\n                            Token:\r\n                     <input type=\"text\" name=\"name\" value=\"MKR\" />\r\n                        </label>\r\n                    </form>\r\n                    <br></br>\r\n                    <input type=\"text\" name=\"name\" placeholder=\"Enter coin\" value={Price} />\r\n                    <input type=\"text\" name=\"name\" placeholder=\"Enter coin\" value={`https://kovan.etherscan.io/tx/` + Hash} />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classestest.button}\r\n                        onClick={() => onSave(newId)}\r\n                    >\r\n                        Exchang Token\r\n                        </Button>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n            {/*<MaterialTable\r\n                columns={[\r\n                    { title: \"Symbol\", field: 'image' },\r\n                    { title: \"Name\", field: 'name' },\r\n                    { title: \"24H Change\", field: 'price24' },\r\n                    { title: \"\tPrice ($)\", field: 'current_price' },\r\n                    { title: \"\tMarket cap ($)\", field: 'market_cap' },\r\n                ]}\r\n                data={\r\n                    data.map((coin) => (\r\n                        {\r\n                            image: <img src={coin.image} style={{ width: 25, height: 25, marginRight: 10 }} />,\r\n                            name: coin.symbol.toUpperCase(),\r\n                            price24: formatPercent(coin.price_change_percentage_24h),\r\n                            current_price: coin.current_price,\r\n                            market_cap: coin.market_cap,\r\n                        }\r\n                    ))}\r\n                //{ image: \"test\", price24: \"test\", Price: \"test\", Marketcap: \"test\" },\r\n                    title=\"Coinmarketcap\" /> */}\r\n\r\n        </Layout>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}